Memory segment.

Continuous range of bytes in memory.


2024-05-17

At design time I was thinking about alternative representations:

  * Two points:

      <Start>
      <Finish>

    * Not practical. Typically you interested in size of structure,
      not it's boundaries.

    * <Finish> can be less than <Start>.

      We can treat this as complimentary angle, so (45, -45) describes
      circle arc point starting at 45 degrees and ending at 315 degrees.

      Nice structure for circular buffer in array. But you need to
      know array size, third parameter.

  * "Size" or "Length"?

    "Length" is one-dimensional metric. "Size" is something more
    generic. We are talking about "large size", not "long length".

    I settled on "size" assuming amount of information units in
    structure, not geometric meaning of length of 1-d segment.


2024-10-23

I've renamed <Start> to <Addr>.

First, I'm dropping [me_MemoryPoint]. Noone needs point, they all
need segment of memory. Modules are not forever, my friend.

Getting TUint_2 with address where memory segment starts was
<Start.Addr>. Conceptually nice but redundant.

After removing [me_MemoryPoint] I have freedom how to name address field:
<Start>, <Addr> or <StartAddr>? (<Address> is too mouthful).

I'm choosing <Addr> to keep users aware that we are talking most likely
about RAM address. Not about some float-point segment with Start at 1.134.

<StartAddr> is redundant because there are no other "Addr"'s in this scope.
